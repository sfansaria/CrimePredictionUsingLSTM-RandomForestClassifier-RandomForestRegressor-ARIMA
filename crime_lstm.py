# -*- coding: utf-8 -*-
"""Crime_lstm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g3c8x3F8X0_LGkLl5b0EMVQ4yrmnD_HY
"""

from google.colab import drive
drive.mount('/content/drive')

import sys
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import datetime
import math


import plotly.graph_objects as go



from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectFromModel
from sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler
#from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, mean_squared_error

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM

crime_df = pd.read_csv('/content/drive/My Drive/ml_datasets/Crime_Data_from_2020_to_Present.csv')

print(crime_df.head(5))

dict_zone = {}
for index, row in crime_df.iterrows():
    if( not (int(row['AREA']) in dict_zone)):
        dict_zone[row['AREA']] = row['AREA NAME']
dict_zone

"""#Zona"""

zonaUnderExam_id = 14
zonaUnderExam_name = dict_zone[zonaUnderExam_id]
print("ID =",zonaUnderExam_id, "Name=",zonaUnderExam_name)

crime_df['month'] = pd.to_datetime(crime_df['DATE OCC']).dt.strftime('%m-%Y')
crime_df.head(5)

Zone_Month = crime_df.groupby(["AREA","month"]).size().reset_index(name='Count')
Zone_Month.head(5)

Zone_Month.tail(4)

Zone_Month.shape

def create_dataset(dataset, look_back=1):
    dataX, dataY = [], []
    for i in range(len(dataset)-look_back):
        a = dataset[i:(i+look_back), 0]
        dataX.append(a)
        dataY.append(dataset[i+look_back, 0])
    return np.array(dataX), np.array(dataY)

AREA = zonaUnderExam_id

dataset = Zone_Month[(Zone_Month['AREA']==AREA)]
print(dataset.head(1))

drop_attributes = ['AREA','month']
dataset = dataset.drop(columns=drop_attributes)

print(dataset.head(1))
print("length of the dataset:",len(dataset))

dataset = dataset.values
dataset = dataset.astype('int32')
dataset

def moving_average(a, n=3):
  ret = np.cumsum(a, dtype=float)
  ret[n:] = ret[n:] - ret[:-n]
  return ret[n-1:]/n

list_graphs = []

graph_1 = go.Scatter(x=list(range(0,len(dataset))),y=dataset.flatten(),name="Dataset")
list_graphs.append(graph_1)

average = moving_average(dataset)

graph_2 = go.Scatter(x=list(range(0,len(dataset))),y=average,name="Average")
list_graphs.append(graph_2)

fig = go.Figure(data=list_graphs)
fig.update_layout(width=1024,height=500,title='Dataset of crimes in ' + dict_zone[AREA], xaxis=dict(title='Month'),yaxis=dict(title='Number of Crimes'))
fig.show()

len(dataset)

"""#MinMax Scaler to rescale the dataset and it gives more attention on outliers"""

scaler = MinMaxScaler(feature_range=(0, 1))
dataset = scaler.fit_transform(dataset)


#Scale the dataset

#scaler = RobustScaler()
#dataset = scaler.fit_transform(dataset)

"""#Split the dataset with 70% for training and 30% for testing."""

train_size = int(len(dataset)*0.7)
test_size = len(dataset) - train_size

train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]

look_back = 1
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)

trainX.shape, trainY.shape, testX.shape, testY.shape

#Reshape the dataset size

trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0],1,testX.shape[1]))

"""LSTM MODEL
Model with 2 layers with 8 and 4 units as input and 1 layer of output.
Epochs=500
Batch Size = 4 unit
"""

model = Sequential()
model.add(LSTM(8,return_sequences=True, input_shape=(1,look_back)))
model.add(LSTM(4,return_sequences=False, input_shape=(1,look_back)))

model.add(Dense(1))

#compile the model

model.compile(loss='mean_squared_error', optimizer='rmsprop')

#Train the model
model.fit(trainX, trainY, epochs=50, batch_size=4, verbose=2)

"""# Run the predictions"""

trainPredict = model.predict(trainX)
testPredict = model.predict(testX)

trainPredict= scaler.inverse_transform(trainPredict)
trainY = scaler.inverse_transform([trainY])
testPredict = scaler.inverse_transform(testPredict)
testY = scaler.inverse_transform([testY])

trainY[0], trainPredict[:,0]

testY[0], testPredict[:,0]

trainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))
print('Train Score: %.2f RMSE' %(trainScore))
testScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))
print('Test Score: %.2f RMSE' %(testScore))

trainPredictPlot = np.empty_like(dataset)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back: len(trainPredict) + look_back, :] = trainPredict

testPredictPlot = np.empty_like(dataset)
testPredictPlot[:, :] = np.nan
testPredictPlot[len(trainPredict) + look_back : len(dataset)-1, :] = testPredict

list_Graph = []
list_Graph.append(go.Scatter(x=list(range(0,len(dataset))),y=scaler.inverse_transform(dataset).flatten(),name="Original Dataset"))
list_Graph.append(go.Scatter(x=list(range(0,len(trainPredictPlot))),y=trainPredictPlot.flatten(),name="Predict with Train set"))
list_Graph.append(go.Scatter(x=list(range(0,len(testPredictPlot))),y=testPredictPlot.flatten(),name="Predict with Test set"))


fig = go.Figure(data=list_Graph)
fig.update_layout(width=1024,height=500,title='[LSTM] Prediction for \n' + dict_zone[AREA], xaxis=dict(title='Month'),yaxis=dict(title='Number of Crimes'))
fig.show()
